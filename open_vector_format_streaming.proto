//  ---- Copyright Start ---------
//MIT License
// 
// Copyright (c) 2021 Digital-Production-Aachen
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// ----- Copyright End----------



//This proto defines services to layerwise stream OpenVectorFormat files using RPC


syntax = "proto3";

//option csharp_namespace = "StreamingServer";
package open_vector_format_streaming;


import "'OpenVectorFormat/open_vector_format.proto";

option csharp_namespace = "GrpcOpenVectorFormatStreamingClient";



// --------Service definition-------------
service StateMachine{
	//streaming status to snychronize in state machine
	rpc State(stream StateClient) returns (stream StateServer) {}
}


service Streaming{
	//streaming of OpenVectorFormat File
	rpc OpenVectorFormatElement(ClientRequest) returns (stream ServerReply) {}
}



// ------------- Data Structur --------------
//Defintion of States on Server and Client Side
enum ServerState{
	ServerIdle = 0;
	ServerStreaming = 1;
	ServerWaiting = 2;
	ServerError = 3;
	ServerAbort = 4;
}

enum ClientState{
	ClientIdle = 0;
	ClientStreaming = 1;
	ClientWaiting = 2;
	ClientError = 3;
	ClientAbort = 4;
	ClientWaiting_for_job = 5;
}



// The names of the commands are the same as in the FileReader implementation of AbstractVectorFileHandler. Functionality, parameters etc. are also the same.
enum OpenVectorFormatAccessLevel{
  GET_JOB_SHELL = 0;
  GET_PLANE = 1;
  GET_VECTOR_BLOCK = 2;
}


message StateServer{
	ServerState state = 1;
	
	// Will be included in response to make identification easier.
	uint64 request_id = 2;

}

message StateClient{
	ClientState state = 1;
	
	// Will be included in response to make identification easier.
	uint64 request_id = 2;
}





message ClientRequest {
  OpenVectorFormatAccessLevel selected_access_level = 1;
      
  // Will be included in response to make identification easier.
  uint64 request_id = 2;
       
  // must be set for OpenVectorFormatAccessLevel.GetPlane
  int32 plane_index = 3;    
    
  // must be set for OpenVectorFormatAccessLevel.GetVectorBlock
  int32 vector_block_index = 4;

}

message ServerReply {
  // set in case the request is denied
  string info_message = 1;
    
  // Corresponding request ID
  uint64 request_id = 2;
	
  // set for OpenVectorFormatAccessLevel.GetJobShell
  open_vector_format.Job job_shell = 3;
    
  // set for OpenVectorFormatAccessLevel.GetPlane
  open_vector_format.WorkPlane work_plane = 4;
    
  // set for OpenVectorFormatAccessLevel.GetVectorBlock
  open_vector_format.VectorBlock vector_block = 5;
   
}
